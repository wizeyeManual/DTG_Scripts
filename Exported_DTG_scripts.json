{
    "Datas": [
        {
            "id": "Utils",
            "Name": "Utils",
            "IconPath": "",
            "Script": "var Utils  = {\n    RectRTA : function (parentCoordinate, relativeCoordinate) {\n        var X = parentCoordinate.Left + parentCoordinate.Width * relativeCoordinate[0][0];\n        var Y = parentCoordinate.Top + parentCoordinate.Height * relativeCoordinate[0][1];\n        var Right = parentCoordinate.Left + parentCoordinate.Width * relativeCoordinate[1][0];\n        var Bottom = parentCoordinate.Top + parentCoordinate.Height * relativeCoordinate[1][1];\n        return JSRect.create(X, Y, Right-X, Bottom-Y);\n    }\n    ,\n    PointRTA : function (parentCoordinate, relativeCoordinate) {\n        var X = parentCoordinate.Left + parentCoordinate.Width * relativeCoordinate[0];\n        var Y = parentCoordinate.Top + parentCoordinate.Height * relativeCoordinate[1];\n        return JSPoint.create(X, Y);\n    }\n    ,\n    CreateUniversal : function(canvas, style) {\n        var rect = null;\n        var image = null;\n        var text = null;\n        var color = JSColor.create(style.BorderColor);\n        var fillColor = JSColor.create(style.BackGroundColor);\n        if (color.A != 0 || fillColor.A != 0 )\n        {\n            var rect = Rectangle.create(style.ObjectName + \"::rect\");\n            var image = null;\n            var text = null;\n            rect.coordinates = style.Position;\n            rect.color = color;\n            rect.fillColor = fillColor;\n            rect.radius = style.BorderRadius;\n            rect.weight = style.BorderThickness;\n            rect.mapLink = style.MapLink;\n            rect.mapLinkTarget = style.MapLinkTarget;\n            canvas.add(rect);\n        }\n        if (style.IconImageUrl && style.IconImageUrl.length != 0)\n        {\n            image = Image.create(style.ObjectName + \"::image\");\n            image.coordinates = Utils.RectRTA(style.Position, style.IconPosition);\n            image.url = style.IconImageUrl;\n            image.fit = true;\n            canvas.add(image);\n        }\n        if (style.Label && style.Label.length != 0)\n        {\n            var text = Text.create(style.ObjectName + \"::text\");\n            text.coordinates = Utils.RectRTA(style.Position, style.TitlePosition);\n            text.alignment = style.TitleAlignment;\n            text.color = JSColor.create(style.TitleColor);\n            text.fontSize = \"\";\n            text.textAlign = \"center\";\n            text.text = style.Label;\n            if (style.LinkUrl && style.LinkUrl.length != 0 && style.LinkUrl != \"null\")\n            {\n                text.actions.add(\"click\", \"newTab\", [style.LinkUrl]);\n            }\n            canvas.add(text);\n        }\n        if (style.ShowAlarmLamp == true)\n        {\n            var lamp = Lamp.create(style.ObjectName + \"::lamp\");\n            lamp.coordinates = Utils.PointRTA(style.Position, style.AlarmLampPosition);\n            lamp.radius = style.AlarmLampSize;\n            lamp.fillColor = JSColor.create(style.AlarmLampColor);\n            lamp.objectName = style.ObjectName;\n            canvas.add(lamp);\n        }\n        return rect;\n    }\n    ,\n    createRect: function(canvas, name, style)\n    {\n        var rect = Rectangle.create(name);\n        rect.coordinates = (style.coordinates)?style.coordinates:JSRect.create(0,0,10,10);\n        rect.color = (style.color)?JSColor.create(style.color):JSColor.create(\"#FFFFFFFF\");\n        rect.fillColor = (style.fillColor)?JSColor.create(style.fillColor):JSColor.create(\"#80000000\");\n        rect.radius = (style.radius)?style.radius:0;\n        rect.weight = (style.weight)?style.weight:1;\n        rect.mapLink = (style.mapLink)?style.mapLink:\"\";\n        rect.mapLinkTarget = (style.mapLinkTarget)?style.mapLinkTarget:\"\";\n        canvas.add(rect);\n        return rect;\n    }\n    ,\n    createText: function(canvas, name, style)\n    {\n        var text = Text.create(name);\n        text.coordinates = (style.coordinates)?style.coordinates:JSRect.create(0,0,10,10);\n        text.color = (style.color)?JSColor.create(style.color):JSColor.create(\"#FFFFFFFF\");\n        text.text = (style.text)?style.text:\"\";\n        text.textAlign = (style.textAlign)?style.textAlign:\"center\";\n        text.fontSize = (style.fontSize)?style.fontSize:\"\";\n        text.objectName = (style.objectName)?style.objectName:\"\";\n        canvas.add(text);\n        return text;\n    }\n    ,\n    createImage: function(canvas, name, style)\n    {\n        image = Image.create(name);\n        image.coordinates = style.coordinates;\n        image.url = style.url;\n        image.fit = style.fit;\n        canvas.add(image);\n        return image;\n    }\n    ,\n    createIFrame: function(canvas, name, style)\n    {\n        box = Box.create(name);\n        box.coordinates = style.coordinates;\n        box.content = style.content;\n        canvas.add(box);\n        return box;\n    }\n    ,\n    createLamp: function(canvas, name, style)\n    {\n        var lamp = Lamp.create(name);\n        lamp.coordinates = (style.coordinates)?style.coordinates:JSPoint.create(10,10);\n        lamp.radius = (style.radius)?style.radius:6;\n        lamp.fillColor = (style.fillColor)?JSColor.create(style.fillColor):JSColor.create(\"#FFFFFFFF\");\n        lamp.objectName = (style.objectName)?style.objectName:\"\";\n        canvas.add(lamp);\n        return lamp;\n    }\n    ,\n    createEllipse: function(canvas, name, style)\n    {\n        var ellipse = Ellipse.create(name);\n        ellipse.coordinates = style.coordinates;\n        ellipse.color = (style.color)?JSColor.create(style.color):JSColor.create(\"#FFFFFFFF\");\n        ellipse.fillColor = (style.fillColor)?JSColor.create(style.fillColor):JSColor.create(\"#80000000\");\n        ellipse.weight = (style.weight)?style.weight:1;\n        ellipse.mapLink = (style.mapLink)?style.mapLink:\"\";\n        ellipse.mapLinkTarget = (style.mapLinkTarget)?style.mapLinkTarget:\"\";\n        canvas.add(ellipse);\n        return ellipse;\n    }\n    ,\n    createLine: function(canvas, name, style)\n    {\n        var line = Line.create(name);\n        //line.coordinates = style.coordinates;\n        line.coordinates.Clear();\n        for(var idx in style.coordinates)\n        {\n            line.coordinates.Add(style.coordinates[idx]);\n        }\n        line.color = (style.color)?JSColor.create(style.color):JSColor.create(\"#FFFFFFFF\");\n        line.fillColor = (style.fillColor)?JSColor.create(style.fillColor):JSColor.create(\"#80000000\");\n        line.weight = (style.weight)?style.weight:1;\n        line.startCap = (style.startCap)?style.startCap:\"\";\n        line.endCap = (style.endCap)?style.endCap:\"\";\n        canvas.add(line);\n        return line;\n    }\n    ,\n    createText: function(canvas, name, style)\n    {\n        var text = Text.create(name);\n        text.coordinates = (style.coordinates)?style.coordinates:JSRect.create(0,0,10,10);\n        text.color = (style.color)?JSColor.create(style.color):JSColor.create(\"#FFFFFFFF\");\n        text.text = (style.text)?style.text:\"\";\n        text.textAlign = (style.textAlign)?style.textAlign:\"center\";\n        text.fontSize = (style.fontSize)?style.fontSize:\"\";\n        text.objectName = (style.objectName)?style.objectName:\"\";\n        canvas.add(text);\n        return text;\n    }\n    ,\n    Clone : function (source, name) {\n        var target = UIETManager.Get(source.classname).create(name);\n        for(var e in source)\n        {\n            if (e == \"classname\" || e == \"id\" || e == \"name\" || e == \"dataBinding\" || e == \"valueOf\") continue;\n            target[e] = source[e];\n        }\n        return target;\n    }\n}\n",
            "MockupData": "{\n}\n",
            "Style": "[\n    {\n        \"name\": \"number\",\n        \"value\": 1\n    }\n]\n",
            "parentId": null
        },
        {
            "id": "Item",
            "Name": "Item",
            "IconPath": "",
            "Script": "Item = {\r\n    main : function()\r\n    {\r\n    }\r\n}",
            "MockupData": "",
            "Style": "",
            "parentId": null
        },
        {
            "id": "DrawGroupBox",
            "Name": "DrawGroupBox",
            "IconPath": "",
            "Script": "DrawGroupBox = {\r\n    DrawFrame: function()\r\n    {\r\n        var upperTitle = true;\r\n        var style = this._data.style[0];\r\n        var data = this._data.data[0];\r\n        var rect = this._templateElement.coordinates;\r\n\t\t\r\n        var titleHeight = 0;\r\n        var innerMargin = rect.Height * 0.05;\r\n        if (style.TitlePosition[0][1] < 0.5)\r\n        {\r\n            upperTitle = true;\r\n            if (style.TitlePosition[1][1] != 0)\r\n            {\r\n                titleHeight = item.TitlePosition[1][1] * rect.Height;\r\n            }\r\n            \r\n            if (this.childTemplateItem)\r\n            {\r\n                innerMargin = this.childTemplateItem.coordinates.Top - (rect.Top + titleHeight);\r\n            }\r\n\r\n        } else\r\n        {\r\n            upperTitle = false;            \r\n            if (style.TitlePosition[0][1] != 0)\r\n            {\r\n                titleHeight = (1-style.TitlePosition[0][1]) * rect.Height;\r\n            }\r\n            \r\n            if (this.childTemplateItem)\r\n            {\r\n                innerMargin = this.childTemplateItem.coordinates.Top - rect.Top;\r\n            }\r\n        }\r\n\r\n        if (upperTitle)\r\n        {\r\n            this.innerArea = JSRect.create(rect.Left + innerMargin, rect.Top + titleHeight + innerMargin, rect.Width - (innerMargin * 2), rect.Height - (innerMargin * 2));\r\n        }\r\n        else\r\n        {\r\n            this.innerArea = JSRect.create(rect.Left + innerMargin, rect.Top + innerMargin, rect.Width - (innerMargin * 2), rect.Height - titleHeight - (innerMargin * 2));\r\n        }\r\n\r\n        this.cols = Math.floor((this.innerArea.Width + this.objectMargin) / (this.objectWidth + this.objectMargin));\r\n        if (this.cols <= 0)\r\n        {\r\n            this.cols = 1;\r\n        }\r\n\r\n        this.rows = Math.round((this.itemCount / this.cols) + 0.49); //무조건 올림\r\n\r\n        do\r\n        {\r\n\r\n            var est_height = (this.rows * this.objectHeight) + ((this.rows - 1) * this.objectMargin);\r\n\r\n            if (est_height > this.innerArea.Height)\r\n            {\r\n                this.cols++;\r\n                this.objectWidth = ((this.innerArea.Width - ((this.cols - 1) * this.objectMargin)) / this.cols);\r\n                this.objectHeight = this.objectWidth * this.objectHeightRatio;\r\n                this.objectMargin = this.objectWidth / 40;\r\n                this.rows = Math.round((this.itemCount / this.cols) + 0.49);\r\n                continue;\r\n            }\r\n            else\r\n            {\r\n                break;\r\n            }\r\n\r\n        } while (true);\r\n\r\n        var innerAreaWidth = (this.cols * this.objectWidth) + ((this.cols - 1) * this.objectMargin);\r\n        var innerAreaLeft = rect.Left + (rect.Width - innerAreaWidth) / 2;\r\n        this.innerArea = new JSRect(innerAreaLeft, this.innerArea.Top, innerAreaWidth, this.innerArea.Height);\r\n        \r\n        Utils.CreateUniversal(this._canvas, {\r\n\t\t\t\"ObjectName\": this._templateElement.name,\r\n\t\t\t\"Position\": this._templateElement.coordinates,\r\n\t\t\t\"BorderColor\": style.BorderColor,\r\n\t\t\t\"BackGroundColor\": style.BackGroundColor,\r\n\t\t\t\"BorderRadius\": style.BorderRadius,\r\n\t\t\t\"BorderThickness\": style.BorderThickness,\r\n\t\t\t\"TitlePosition\": style.TitlePosition,\r\n\t\t\t\"TitleAlignment\": \"center\",\r\n\t\t\t\"TitleColor\": style.TitleColor,\r\n\t\t\t\"Label\": style.TitleCaption,\r\n\t\t\t\"AlarmLampPosition\": [0.95, 0.05],\r\n\t\t\t\"AlarmLampSize\": 6,\r\n\t\t\t\"AlarmLampColor\": \"#FF008000\",\r\n            \"ShowAlarmLamp\": style.ShowAlarmLamp,\r\n            \"MapLink\": \"\",\r\n            \"MapLinkTarget\": \"\"\r\n\t\t});\r\n    },\r\n    DrawChild: function(data, index)\r\n    {\r\n        var col = index % this.cols;\r\n        var row = Math.floor(index / this.cols);\r\n        var x = this.innerArea.Left + col * (this.objectWidth + this.objectMargin);\r\n        var y = this.innerArea.Top + row * (this.objectHeight + this.objectMargin);\r\n\r\n        if (this.childTemplateItem)\r\n        {\r\n            var childStyle = this.childTemplateItem.dataBinding.ToArray()[0].style;\r\n            \r\n            debug.print(\"width: \" + this.objectWidth + \", height: \" + this.objectHeight);\r\n            debug.print(\"childStyle.TitlePosition: \" + childStyle.TitlePosition[0][0]);\r\n\r\n            Utils.CreateUniversal(this._canvas, {\r\n                \"ObjectName\": data.Name,\r\n                \"Position\": JSRect.create(x, y, this.objectWidth, this.objectHeight),\r\n                \"BorderColor\": childStyle.BorderColor,\r\n                \"BackGroundColor\": childStyle.BackGroundColor,\r\n                \"BorderRadius\": childStyle.BorderRadius,\r\n                \"BorderThickness\": childStyle.BorderThickness,\r\n                \"TitlePosition\": JSON.parse(childStyle.TitlePosition),\r\n                \"TitleAlignment\": childStyle.TitleAlignment,\r\n                \"TitleColor\": childStyle.TitleColor,\r\n                \"Label\": data.Label,\r\n                \"AlarmLampPosition\": childStyle.AlarmLampPosition,\r\n                \"AlarmLampSize\": childStyle.AlarmLampSize,\r\n                \"AlarmLampColor\": childStyle.AlarmLampColor,\r\n                \"ShowAlarmLamp\": childStyle.ShowAlarmLamp,\r\n                \"MapLink\": \"\",\r\n                \"MapLinkTarget\": \"\",\r\n                \"LinkUrl\" : (data.Properties.url && data.Properties.url.length != 0)?data.Properties.url:\"\",                \r\n                \"IconImageUrl\": \"http://localhost:8000/database-server.svg\", //childStyle.IconImageUrl,\r\n                \"IconPosition\": [[0, 0], [1, 1]] //childStyle.IconPosition\r\n            });\r\n            \r\n        }\r\n        else\r\n        {\r\n            Utils.CreateUniversal(this._canvas, {\r\n                \"ObjectName\": data.Name,\r\n                \"Position\": JSRect.create(x, y, this.objectWidth, this.objectHeight),\r\n                \"BorderColor\": \"#FFFFFFFF\",\r\n                \"BackGroundColor\": \"#00000000\",\r\n                \"BorderRadius\": 0,\r\n                \"BorderThickness\": 3,\r\n                \"TitlePosition\": [[0.27, 0.22], [0.92, 0.78]],\r\n                \"TitleAlignment\": \"center\",\r\n                \"TitleColor\": \"#FFFFFFFF\",\r\n                \"Label\": data.Label,\r\n                \"AlarmLampPosition\": [0.95, 0.28],\r\n                \"AlarmLampSize\": 6,\r\n                \"AlarmLampColor\": \"#FF008000\",\r\n                \"ShowAlarmLamp\": true,\r\n                \"MapLink\": \"\",\r\n                \"MapLinkTarget\": \"\",\r\n                \"LinkUrl\" : (data.Properties.url && data.Properties.url.length != 0)?data.Properties.url:\"\",                \r\n                \"IconImageUrl\": \"\",\r\n                \"IconPosition\": [[0.08, 0.22], [0.20, 0.78]]\r\n            });\r\n        }\r\n    },\r\n\tmain: function()\r\n\t{\r\n        this.defaultSize = 164;\r\n        this.objectWidth;\r\n        this.objectHeight;\r\n        this.objectMargin;\r\n        this.objectHeightRatio;\r\n        this.itemCount = 0;\r\n        \r\n\t\tif (!this._data.data || this._data.data.length == 0)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n        \r\n        this.childTemplateItem = this._templateCanvas.get(this._templateElement.name + \"_Item\");\r\n        \r\n        this.itemCount = this._data.data.length;\r\n\r\n        if (this.childTemplateItem != null)\r\n        {\r\n            this.objectWidth = this.childTemplateItem.coordinates.Width;\r\n            this.objectHeight = this.childTemplateItem.coordinates.Height;\r\n            this.objectHeightRatio = this.objectHeight / this.objectWidth;\r\n            debug.print(\"width: \" + this.objectWidth + \", height: \" + this.objectHeight);\r\n        }\r\n        else\r\n        {\r\n            this.objectWidth = this.defaultSize;\r\n            this.objectHeight = this.objectWidth / 4.68;\r\n            this.objectHeightRatio = this.objectHeight / this.objectWidth;\r\n        }\r\n\r\n        this.objectMargin = this.objectWidth / 40;        \r\n        \r\n        this.DrawFrame();\r\n        \r\n        for(var index in this._data.data)\r\n        {\r\n            this.DrawChild(this._data.data[index], index);\r\n        }\r\n\t}\r\n}",
            "MockupData": "",
            "Style": "",
            "parentId": null
        },
        {
            "id": "InfraDiagram",
            "Name": "InfraDiagram",
            "IconPath": "",
            "Script": "InfraDiagram = {\r\n    DrawGroupFrame: function(obj, depth, style)\r\n    {\r\n        //if (obj == null) return new JSRect();\r\n        var IsRoot = !obj.Parent;\r\n        var parentRect = (IsRoot) ? this._templateElement.coordinates : obj.Parent.element.coordinates;\r\n        var total = (IsRoot) ? 1 : obj.Parent.Children.length;\r\n\t\tvar order = (IsRoot)?0:obj.Parent.Children.indexOf(obj);\r\n\r\n        var r_w = parentRect.Width / 100;\r\n        var r_h = parentRect.Height / 100;\r\n        var Cols = Math.round(Math.sqrt(total) + 0.49);\r\n        var Rows = Math.round((total / Cols) + 0.49);\r\n        var marginA_w = r_w * style.MarginA;\r\n        var marginA_Top_h = r_h * style.MarginATop;\r\n        var marginA_Bottom_h = r_h * style.MarginABottom;\r\n        var marginA_h = r_h * style.MarginA;\r\n        var marginB_w = r_w * style.MarginB;\r\n        var marginB_h = r_h * style.MarginB;\r\n\t\tvar marginA;\r\n\r\n        if (marginA_h < marginA_w)\r\n        {\r\n            marginA = marginA_h;\r\n        }\r\n        else\r\n        {\r\n            marginA = marginA_w;\r\n        }\r\n\r\n        var width = parentRect.Width - (marginA * 2);\r\n\r\n        if (depth == 1)\r\n        {\r\n            marginA_Top_h = this.FixedTopMargine * 1.2;\r\n        }\r\n\r\n        var height = parentRect.Height - (marginA_Top_h + marginA_Bottom_h);\r\n\r\n        var c_w;\r\n        var c_h;\r\n\r\n        if (depth == 1)\r\n        {\r\n            c_w = (width - (marginB_w * (Cols - 1))) / Cols;\r\n            c_h = (height - (marginB_h * (Rows - 1))) / Rows;\r\n        }\r\n        else\r\n        {\r\n            c_w = (width - (marginB_w * (Cols - 1))) / Cols;\r\n            c_h = (height - (marginB_h * (Cols - 1))) / Cols;\r\n        }\r\n\r\n        var row = Math.floor(order / Cols);\r\n        var col = order % Cols;\r\n        var left = parentRect.Left + (parentRect.Width - width) / 2 + col * (marginB_w + c_w);\r\n        var top = parentRect.Top + (parentRect.Height - height) / 2 + row * (marginB_h + c_h);\r\n\r\n\t\tvar rect = Utils.CreateUniversal(this._canvas, {\r\n\t\t\t\"ObjectName\": obj.Name,\r\n\t\t\t\"Position\": JSRect.create(left, top, c_w, c_h),\r\n\t\t\t\"BorderColor\": style.BorderColor,\r\n\t\t\t\"BackGroundColor\": style.BackGroundColor,\r\n\t\t\t\"BorderRadius\": style.BorderRadius,\r\n\t\t\t\"BorderThickness\": style.BorderThickness,\r\n\t\t\t\"TitlePosition\": style.TitlePosition,\r\n\t\t\t\"TitleAlignment\": style.TitleAlignment,\r\n\t\t\t\"TitleColor\": style.TitleColor,\r\n\t\t\t\"Label\": obj.Label,\r\n\t\t\t\"AlarmLampPosition\": style.AlarmLampPosition,\r\n      \"AlarmLampSize\": style.AlarmLampSize,\r\n\t\t\t\"AlarmLampColor\": style.AlarmLampColor,\r\n      \"ShowAlarmLamp\": style.ShowAlarmLamp,\r\n\t\t\t\"LinkUrl\" : (obj.Properties.url && obj.Properties.url.length != 0)?obj.Properties.url:\"\",\r\n            \"MapLink\": (obj.Link)?obj.Link.MapId:\"\",\r\n            \"MapLinkTarget\": \"\"\r\n\t\t});\r\n\r\n\t\tobj.element = rect;\r\n    },\r\n    DrawObject: function(obj, depth, style, isDetail)\r\n    {\r\n        var IsRoot = !obj.Parent;\r\n        var parentRect = (IsRoot) ? this._templateElement.coordinates : obj.Parent.element.coordinates;\r\n        var total = (IsRoot) ? 1 : obj.Parent.Children.length;\r\n\t\tvar order = (IsRoot)?0:obj.Parent.Children.indexOf(obj);\r\n\r\n        var r_w = parentRect.Width / 100;\r\n        var r_h = parentRect.Height / 100;\r\n        var Cols = Math.round(Math.sqrt(total) + 0.49);\r\n        var Rows = Math.round((total / Cols) + 0.49);\r\n        var marginA_w = r_w * style.MarginA;\r\n        var marginA_Top_h = r_h * style.MarginATop;\r\n        var marginA_Bottom_h = r_h * style.MarginABottom;\r\n        var marginB_w = r_w * style.MarginB;\r\n        var marginB_h = r_h * style.MarginB;\r\n\r\n        var width = parentRect.Width - (marginA_w * 2);\r\n\r\n        if (depth == 1)\r\n        {\r\n            marginA_Top_h = this.FixedTopMargine;\r\n        }\r\n\r\n        var height = parentRect.Height - (marginA_Top_h + marginA_Bottom_h);\r\n        var c_w = 0;\r\n        var c_h = 0;\r\n\r\n        //var isDetail = ( (StyleCount-1) == depth);\r\n\r\n        var item;\r\n\r\n        var r_chagnedh = 1;\r\n\r\n        if (isDetail)\r\n        {\r\n            marginA_Top_h = (style.MarginATop / 100) * this.CellMinHeight;\r\n            marginA_Bottom_h = (style.MarginABottom / 100) * this.CellMinHeight;\r\n            marginB_h = ((style.MarginB * 2) / 100) * this.CellMinHeight;\r\n\r\n            c_h = this.CellMinHeight - marginA_Top_h - marginA_Bottom_h;\r\n            c_w = width - marginB_w;\r\n            Cols = 1;\r\n            Rows = total;\r\n\r\n            height = parentRect.Height - (marginB_h);\r\n\r\n            var newCellWidth = c_w;\r\n\r\n            while (true)\r\n            {\r\n                if (!(height < ((Rows * c_h) + ((Rows - 1) * marginB_h))))\r\n                {\r\n                    if (this.DetailMaxCount == 4)\r\n                    {\r\n                        c_h = (c_w / this.CellMinWidth) * c_h;\r\n                    }\r\n\r\n                    break;\r\n                }\r\n\r\n                Cols++;\r\n\r\n                var currentCellWidth = c_w;\r\n\r\n                newCellWidth = currentCellWidth / Cols;\r\n                c_h = (currentCellWidth / this.CellMinWidth) * c_h;\r\n\r\n                Rows = Math.round((total / Cols) + 0.49);\r\n            }\r\n\r\n            c_w = newCellWidth;\r\n        }\r\n        else\r\n        {\r\n            Cols = Math.round((width / this.CellMinWidth) - 0.5);\r\n            Rows = Math.round((total / Cols) + 0.49);\r\n\r\n            if (width < ((Cols * this.CellMinWidth) + ((Cols - 1) * marginB_w)))\r\n            {\r\n                Cols--;\r\n                Rows = Math.round((total / Cols) + 0.49);\r\n            }\r\n\r\n            var child_count = this.DetailMaxCount == 0 ? 1 : this.DetailMaxCount;\r\n\r\n\t\t\tvar childstyle = this._data.style[depth+1];\r\n\r\n            var childTopMargine = (childstyle.MarginATop / 100) * this.CellMinHeight;\r\n            var childBottomMargine = (childstyle.MarginABottom / 100) * this.CellMinHeight;\r\n            var childCellHeight = this.CellMinHeight - childTopMargine - childBottomMargine;\r\n            var childMarginB = ((childstyle.MarginB * 2) / 100) * this.CellMinHeight;\r\n\r\n            c_w = this.CellMinWidth;\r\n            c_h = childTopMargine + childBottomMargine + (childCellHeight * child_count) + (child_count - 1) * childMarginB;\r\n\r\n            while (true)\r\n            {\r\n                if (!(height < ((Rows * c_h) + ((Rows - 1) * marginB_h))))\r\n                {\r\n                    //c_h = (c_w / CellMinWidth) * c_h;\r\n\r\n                    break;\r\n                }\r\n\r\n                Cols++;\r\n\r\n                c_w = (width - (marginB_w * (Cols - 1))) / Cols;\r\n                c_h = (c_w / this.CellMinWidth) * c_h;\r\n\r\n                Rows = Math.round((total / Cols) + 0.49);\r\n            }\r\n\r\n            r_chagnedh = this.CellMinHeight / c_h;\r\n        }\r\n\r\n        var row = Math.floor(order / Cols);\r\n        var col = order % Cols;\r\n        var left = parentRect.Left + (parentRect.Width - width) / 2 + col * (marginB_w + c_w);\r\n        var top = parentRect.Top + marginA_Top_h + row * (marginB_h + c_h);\r\n\r\n\t\tvar rect = Utils.CreateUniversal(this._canvas, {\r\n\t\t\t\"ObjectName\": obj.Name,\r\n\t\t\t\"Position\": JSRect.create(left, top, c_w, c_h),\r\n\t\t\t\"BorderColor\": style.BorderColor,\r\n\t\t\t\"BackGroundColor\": style.BackGroundColor,\r\n\t\t\t\"BorderRadius\": style.BorderRadius,\r\n\t\t\t\"BorderThickness\": style.BorderThickness,\r\n\t\t\t\"TitlePosition\": style.TitlePosition,\r\n\t\t\t\"TitleAlignment\": style.TitleAlignment,\r\n\t\t\t\"TitleColor\": style.TitleColor,\r\n\t\t\t\"Label\": obj.Label,\r\n\t\t\t\"AlarmLampPosition\": style.AlarmLampPosition,\r\n      \"AlarmLampSize\": style.AlarmLampSize,\r\n\t\t\t\"AlarmLampColor\": style.AlarmLampColor,\r\n      \"ShowAlarmLamp\": style.ShowAlarmLamp,\r\n\t\t\t\"LinkUrl\" : (obj.Properties.url && obj.Properties.url.length != 0)?obj.Properties.url:\"\",\r\n            \"MapLink\": (obj.Link)?obj.Link.MapId:\"\",\r\n            \"MapLinkTarget\": \"\"\r\n\t\t});\r\n\r\n\t\tobj.element = rect;\r\n    },\r\n    DrawFrame: function()\r\n    {\r\n        var style = this._templateElement.dataBinding.ToArray()[0].style;\r\n\r\n        Utils.CreateUniversal(this._canvas, {\r\n\t\t\t\"ObjectName\": this._templateElement.name,\r\n\t\t\t\"Position\": this._templateElement.coordinates,\r\n\t\t\t\"BorderColor\": style.BorderColor,\r\n\t\t\t\"BackGroundColor\": style.BackGroundColor,\r\n\t\t\t\"BorderRadius\": style.BorderRadius,\r\n\t\t\t\"BorderThickness\": style.BorderThickness,\r\n\t\t\t\"TitlePosition\": JSON.parse(style.TitlePosition),\r\n\t\t\t\"TitleAlignment\": \"center\",\r\n\t\t\t\"TitleColor\": style.TitleColor,\r\n\t\t\t\"Label\": style.TitleCaption,\r\n\t\t\t\"AlarmLampPosition\": [0.95, 0.05],\r\n\t\t\t\"AlarmLampSize\": style.AlarmLampSize,\r\n\t\t\t\"AlarmLampColor\": style.AlarmLampColor,\r\n      \"ShowAlarmLamp\": style.ShowAlarmLamp,\r\n      \"MapLink\": \"\",\r\n      \"MapLinkTarget\": \"\"\r\n\t\t});\r\n\r\n    },\r\n    DrawLoop: function(data, depth, isDetail)\r\n    {\r\n  \t\tif (data.ObjectTypeName == \"host\" || data.ObjectTypeName == \"vm\")\r\n  \t\t{\r\n  \t\t\tdebug.print(\"Host : \" + data.Name);\r\n  \t\t\tthis.DrawObject(data, depth, this._data.style[depth], false);\r\n        isDetail = true;\r\n  \t\t} else if (isDetail)\r\n  \t\t{\r\n  \t\t\tdebug.print(\"Detail : \" + data.Name);\r\n  \t\t\tthis.DrawObject(data, depth, this._data.style[depth], true);\r\n  \t\t}\r\n  \t\telse\r\n      {\r\n        debug.print(\"Frame : \" + data.Name);\r\n        this.DrawGroupFrame(data, depth, this._data.style[depth]);\r\n      }\r\n\r\n      if (data.Children.length != 0)\r\n      {\r\n        for (var e in data.Children)\r\n        {\r\n          data.Children[e].Parent = data;\r\n          this.DrawLoop(data.Children[e], depth+1, isDetail);\r\n        }\r\n      }\r\n    },\r\n    main: function()\r\n    {\r\n        this.FixedIconSize = 23;\r\n        this.FixedTopMargine = 50;\r\n        this.ImageLeftMargine = 3;\r\n        this.CellMinWidth = 139.06172839506172;\r\n        this.CellMinHeight = 59.252388620504561;\r\n        this.DetailMaxCount = 2;\r\n        this.StyleCount = 0;\r\n\r\n        var data = this._data.data;\r\n        var style = this._data.style;\r\n\r\n    \t\tif (data == null && data.length == 0)\r\n    \t\t{\r\n    \t\t\tif (style != null && style.UsingEmptyGroup)\r\n    \t\t\t{\r\n                    /*\r\n    \t\t\t\tdata = new MapObjectTreeSet()\r\n    \t\t\t\t{\r\n    \t\t\t\t\tName = areaName,\r\n    \t\t\t\t\tLabel = \"\",\r\n    \t\t\t\t\tObjectTypeName = \"App\",\r\n    \t\t\t\t\tParent = null,\r\n    \t\t\t\t\tParentName = string.Empty,\r\n    \t\t\t\t\tChildren = new List<MapObjectTreeSet>(),\r\n    \t\t\t\t\tUserData = new Dictionary<string, object>(),\r\n    \t\t\t\t\tProperties = new Dictionary<string, List<string>>()\r\n    \t\t\t\t};\r\n    \t\t\t\tdata.UserData.Add(\"Depth\", 0);\r\n    \t\t\t\tdata.UserData.Add(\"ItemName\", \"auto::\" + data.ObjectTypeName + areaName);\r\n                    */\r\n    \t\t\t}\r\n    \t\t\telse\r\n    \t\t\t{\r\n    \t\t\t\treturn;\r\n    \t\t\t}\r\n    \t\t}\r\n\r\n        //debug.print(JSON.stringify(data));\r\n\r\n        this.DrawFrame();\r\n\r\n  \t\t  var top = {\r\n  \t\t\t\tChildren: this._data.data,\r\n  \t\t\t\telement: {\r\n  \t\t\t\t\tcoordinates: this._templateElement.coordinates\r\n  \t\t\t\t}\r\n  \t\t\t};\r\n\r\n        for(var index in this._data.data)\r\n        {\r\n    \t\t\tthis._data.data[index].Parent = top;\r\n    \t\t\tthis.DrawLoop(this._data.data[index], 0, false);\r\n        }\r\n    }\r\n}\r\n",
            "MockupData": "",
            "Style": "",
            "parentId": null
        },
        {
            "id": "ShowIfExist",
            "Name": "ShowIfExist",
            "IconPath": "",
            "Script": "ShowIfExist = {\n    main : function()\n    {\n        if (!this._data || this._data.length == 0)\n        {\n            return;\n        }\n        //debug.print(JSON.stringify(this._data));\n        var data = this._data[0];\n        var style = this._data[0].Style;\n        //if (style.UIElementType == \"Universal\")\n        //{\n        debug.print(\"Universal : \" + data.Name );\n        Utils.CreateUniversal(this._canvas, {\n            \"ObjectName\": data.Name,\n            \"Position\": this._templateElement.coordinates,\n            \"BorderColor\": style.BorderColor,\n            \"BackGroundColor\": style.BackGroundColor,\n            \"BorderRadius\": style.BorderRadius,\n            \"BorderThickness\": style.BorderThickness,\n            \"TitlePosition\": style.TitlePosition,\n            \"TitleAlignment\": style.TitleAlignment,\n            \"TitleColor\": style.TitleColor,\n            \"Label\": (!data.Label || data.Label.length == 0)?data.Name:data.Label,\n            \"AlarmLampPosition\": style.AlarmLampPosition,\n            \"AlarmLampSize\": style.AlarmLampSize,\n            \"AlarmLampColor\": style.AlarmLampColor,\n            \"ShowAlarmLamp\": style.ShowAlarmLamp,\n            \"MapLink\": (data.Link)?data.Link.MapId:\"\",\n            \"MapLinkTarget\": \"\",\n            \"LinkUrl\" : (data.Properties.url && data.Properties.url.length != 0)?data.Properties.url:\"\"\n        });\n        //}\n        //else\n        //{\n        //    debug.print(\"Clone : \" + data.Name + \", type : \" + this._templateElement.classname + \", UIElementType : \" + style.UIElementType);\n        //    var item = Utils.Clone(this._templateElement, data.Name);\n        //    this._canvas.add(item);\n        //}\n    }\n}\n",
            "MockupData": "{\n}\n",
            "Style": "[\n    {\n        \"name\":\"BorderColor\",\n        \"value\":\"#FFFF99FF\",\n        \"type\":\"color\"\n    },\n    {\n        \"name\":\"BackGroundColor\",\n        \"value\":\"#FF191919\",\n        \"type\":\"color\"\n    },\n    {\n        \"name\":\"BorderRadius\",\n        \"value\":0,\n        \"type\":\"number\",\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"BorderThickness\",\n        \"value\":4,\n        \"type\":\"number\",\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"TitlePosition\",\n        \"value\":[\n            [\n                0.1,\n                0.1\n            ],\n            [\n                0.9,\n                0.9\n            ]\n        ],\n        \"type\":\"number\"\n    },\n    {\n        \"name\":\"TitleAlignment\",\n        \"value\":\"left\",\n        \"type\":\"string\"\n    },\n    {\n        \"name\":\"TitleColor\",\n        \"value\":\"#FFFFFFFF\",\n        \"type\":\"color\"\n    },\n    {\n        \"name\":\"TitleCaption\",\n        \"value\":\"\",\n        \"type\":\"string\"\n    },\n    {\n        \"name\":\"AlarmLampPosition\",\n        \"value\":[\n            0.95,\n            0.2\n        ],\n        \"type\":\"point\"\n    },\n    {\n        \"name\":\"AlarmLampSize\",\n        \"value\":6,\n        \"type\":\"number\",\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"AlarmLampColor\",\n        \"value\":\"#FF008000\",\n        \"type\":\"color\"\n    },\n    {\n        \"name\":\"ShowAlarmLamp\",\n        \"value\":true,\n        \"type\":\"boolean\"\n    },\n    {\n        \"name\":\"IconPosition\",\n        \"value\":[\n            [\n                0,\n                0\n            ],\n            [\n                1,\n                1\n            ]\n        ],\n        \"type\":\"rect\"\n    },\n    {\n        \"name\":\"IconImageUrl\",\n        \"value\":\"\",\n        \"type\":\"string\"\n    },\n    {\n        \"name\":\"fontSize\",\n        \"value\":\"\",\n        \"type\":\"number\",\n        \"format\":\"0.0\"\n    }\n]\n",
            "parentId": null
        },
        {
            "id": "HDiagram",
            "Name": "HDiagram",
            "IconPath": "",
            "Script": "var HDiagram=\n    {\n        drawFrame: function(data, style, depth)\n        {\n            var IsRoot = !data.Parent;\n            var parentRect = (IsRoot) ? this._templateElement.coordinates : data.Parent.element.coordinates;\n            var total = (IsRoot) ? 1 : data.Parent.Children.length;\n            var order = (IsRoot)?0:data.Parent.Children.indexOf(data);\n            var r_w = parentRect.Width / 100;\n            var r_h = parentRect.Height / 100;\n            var Cols = Math.round(Math.sqrt(total) + 0.49);\n            var Rows = Math.round((total / Cols) + 0.49);\n            var marginA_w = r_w * style.MarginA;\n            var marginA_h = r_h * style.MarginA;\n            var marginB_w = r_w * style.MarginB;\n            var marginB_h = r_h * style.MarginB;\n            var marginA = (marginA_h < marginA_w) ? marginA_h : marginA_w;\n            var width = parentRect.Width - (marginA * 2);\n            var height = parentRect.Height - (marginA * 2);\n            var c_w, c_h, row, col, left, top;\n            if (IsRoot)\n            {\n                var child_total = data.Children.length;\n                if (child_total > 0)\n                {\n                    var child_depth = depth+1;\n                    var child_cols = Math.round(Math.sqrt(child_total) + 0.49);\n                    var child_rows = Math.round((child_total / child_cols) + 0.49);\n                    if (child_cols > child_rows)\n                    {\n                        var childStyle = data.Children[0].Style;\n                        var child_MAw = width * (childStyle.MarginA / 100);\n                        var child_MAh = height * (childStyle.MarginA / 100);\n                        var child_MBw = width * (childStyle.MarginB / 100);\n                        var child_MBh = height * (childStyle.MarginB / 100);\n                        var child_width = width - (child_MAw * 2);\n                        var child_height = height - (child_MAh * 2);\n                        var child_cw = (child_width - (child_MBw * (child_cols - 1))) / child_cols;\n                        var child_ch = (child_height - (child_MBh * (child_rows - 1))) / child_rows;\n                        if (child_cw > child_ch)\n                        {\n                            child_cw = child_ch;\n                            child_width = child_cw * child_cols + child_MBw * (child_cols - 1);\n                            width = child_width + (child_MAw * 2);\n                        }\n                        else\n                        {\n                            child_ch = child_cw;\n                            child_height = child_ch * child_rows + child_MBh * (child_rows - 1);\n                            height = child_height + (child_MAh * 2);\n                        }\n                    }\n                    else\n                    {\n                        if (height < width) width = height;\n                        else height = width;\n                    }\n                }\n            }\n            if (depth == 1)\n            {\n                c_w = (width - (marginB_w * (Cols - 1))) / Cols;\n                c_h = (height - (marginB_h * (Rows - 1))) / Rows;\n            }\n            else\n            {\n                c_w = (width - (marginB_w * (Cols - 1))) / Cols;\n                c_h = (height - (marginB_h * (Cols - 1))) / Cols;\n            }\n            row = Math.floor(order / Cols);\n            col = order % Cols;\n            left = parentRect.Left + (parentRect.Width - width) / 2 + col * (marginB_w + c_w);\n            top = parentRect.Top + (parentRect.Height - height) / 2 + row * (marginB_h + c_h);\n            var rect = Utils.CreateUniversal(this._canvas, {\n                \"ObjectName\": data.Name,\n                \"Position\": JSRect.create(left, top, c_w, c_h),\n                \"BorderColor\": style.BorderColor,\n                \"BackGroundColor\": style.BackGroundColor,\n                \"BorderRadius\": style.BorderRadius,\n                \"BorderThickness\": style.BorderThickness,\n                \"TitlePosition\": style.TitlePosition,\n                \"TitleAlignment\": \"center\",\n                \"TitleColor\": style.TitleColor,\n                \"Label\": (data.Properties.DisplayName && data.Properties.DisplayName.length != 0)?data.Properties.DisplayName[0]:((!data.Label || data.Label.length == 0)?data.Name:data.Label),\n                \"AlarmLampPosition\": [0.95, 0.05],\n                \"AlarmLampSize\": 6,\n                \"AlarmLampColor\": \"#FF008000\",\n                \"ShowAlarmLamp\": style.ShowAlarmLamp,\n                \"MapLink\": (data.Link)?data.Link.MapId:\"\",\n                \"MapLinkTarget\": \"\"\n            });\n            data.element = rect;\n        }\n        ,\n        drawObject: function(data, style, depth)\n        {\n            var IsRoot = !data.Parent;\n            var parentRect = (IsRoot) ? this._templateElement.coordinates : data.Parent.element.coordinates;\n            var total = (IsRoot) ? 1 : data.Parent.Children.length;\n            var order = (IsRoot) ? 0 : data.Parent.Children.indexOf(data);\n            var r_w = parentRect.Width / 100;\n            var r_h = parentRect.Height / 100;\n            var Cols = Math.round(Math.sqrt(total) + 0.49);\n            var marginA_w = r_w * style.MarginA;\n            var marginA_h = r_h * style.MarginA;\n            var marginB_w = r_w * style.MarginB;\n            var marginB_h = r_h * style.MarginB;\n            var marginA = (marginA_h < marginA_w) ? marginA_h : marginA_w;\n            var width = parentRect.Width - (marginA * 2);\n            var height = parentRect.Height - (marginA * 2);\n            var c_w = (width - (marginB_w * (Cols - 1))) / Cols;\n            var c_h = (height - (marginB_h * (Cols - 1))) / Cols;\n            var row = Math.floor(order / Cols);\n            var col = order % Cols;\n            var left = parentRect.Left + (parentRect.Width - width) / 2 + col * (marginB_w + c_w);\n            var top = parentRect.Top + (parentRect.Height - height) / 2 + row * (marginB_h + c_h);\n            var TitleCaptionLength = (data.Label)?data.Label.length:0;\n            var titlePosition;\n            if (TitleCaptionLength < 8) // 1~7\n            {\n                titlePosition = [[0.10, 0.40], [0.90, 0.60]];\n                //20\n            }\n            else if (TitleCaptionLength < 16) // 8~15\n            {\n                titlePosition = [[0.10, 0.30], [0.90, 0.70]];\n                //40\n            }\n            else if (TitleCaptionLength < 24) // 16~23\n            {\n                titlePosition = [[0.10, 0.20], [0.90, 0.80]];\n                //60\n            }\n            else //24~\n            {\n                titlePosition = [[0.10, 0.15], [0.90, 0.85]];\n                //70\n            }\n            var rect = Utils.CreateUniversal(this._canvas, {\n                \"ObjectName\": data.Name,\n                \"Position\": JSRect.create(left, top, c_w, c_h),\n                \"BorderColor\": style.BorderColor,\n                \"BackGroundColor\": style.BackGroundColor,\n                \"BorderRadius\": style.BorderRadius,\n                \"BorderThickness\": style.BorderThickness,\n                \"TitlePosition\": titlePosition,\n                \"TitleAlignment\": \"center\",\n                \"TitleColor\": style.TitleColor,\n                \"Label\": (data.Properties.DisplayName && data.Properties.DisplayName.length != 0)?data.Properties.DisplayName[0]:((!data.Label || data.Label.length == 0)?data.Name:data.Label),\n                \"AlarmLampPosition\": [0.95, 0.05],\n                \"AlarmLampSize\": 6,\n                \"AlarmLampColor\": \"#FF008000\",\n                \"ShowAlarmLamp\": style.ShowAlarmLamp,\n                \"MapLink\": (data.Link)?data.Link.MapId:\"\",\n                \"MapLinkTarget\": \"\"\n            });\n        }\n        ,\n        drawLoop: function(data, depth)\n        {\n            var leaf = (data.Children == null || data.Children.length == 0);\n            if (leaf)\n            {\n                debug.print(\"object : \" + data.Name);\n                this.drawObject(data, data.Style, depth);\n            }\n            else\n            {\n                debug.print(\"frame : \" + data.Name);\n                this.drawFrame(data, data.Style, depth);\n                for(var e in data.Children)\n                {\n                    data.Children[e].Parent = data;\n                    this.drawLoop(data.Children[e], depth+1);\n                }\n            }\n        }\n        ,\n        main: function()\n        {\n            debug.print(JSON.stringify(this._data));\n            for(var idx in this._data)\n            {\n                this.drawLoop(this._data[idx], 0);\n            }\n        }\n    }\n",
            "MockupData": "{\n}\n",
            "Style": "[\n    {\n        \"name\":\"MarginA\",\n        \"value\":7.0,\n        \"format\":\"0.00\"\n    },\n    {\n        \"name\":\"MarginB\",\n        \"value\":1.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"MarginC\",\n        \"value\":0.1,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"BackGroundColor\",\n        \"value\":\"#FF232323\"\n    },\n    {\n        \"name\":\"TitleColor\",\n        \"value\":\"#FFFFFFFF\"\n    },\n    {\n        \"name\":\"TitlePosition\",\n        \"value\":[\n            [\n                0.05,\n                0.93\n            ],\n            [\n                0.95,\n                0.98\n            ]\n        ]\n    },\n    {\n        \"name\":\"BorderColor\",\n        \"value\":\"#FFFFFFFF\"\n    },\n    {\n        \"name\":\"BorderThickness\",\n        \"value\":3.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"BorderRadius\",\n        \"value\":5.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"ShowAlarmLamp\",\n        \"value\":false,\n        \"type\":\"boolean\"\n    }\n]\n",
            "parentId": null
        },
        {
            "id": "blockdiagram",
            "Name": "blockdiagram",
            "IconPath": "",
            "Script": "blockdiagram = {\n    drawFrame: function(data, style)\n    {\n      var title_height = style.coordinates.Height / 15;\n      debug.print(\"title_height:\" + title_height);\n      Utils.createRect(this._canvas, data.Name+\":frame\", {\n        coordinates:style.coordinates,\n        fillColor:style.style.fillColor,\n        color:style.style.borderColor,\n        weight:style.style.borderWeight,\n        radius:style.style.borderRadius\n      });\n      Utils.createRect(this._canvas, data.Name+\":hair_pin\", {\n        coordinates:JSRect.create(style.coordinates.Left, style.coordinates.Top, style.coordinates.Width, title_height),\n        fillColor:style.style.hairPinColor,\n        color:style.style.hairPinColor\n      });\n      Utils.createText(this._canvas, data.Name+\":frame_caption\", {\n        coordinates:JSRect.create(style.coordinates.Left, style.coordinates.Top, style.coordinates.Width, title_height),\n        text:data.Label,\n        color:style.style.textColor,\n        textAlign:style.style.textAlign,\n        fontSize:style.style.fontSize\n      });\n      if (style.style.showAlarmLamp)\n      {\n        Utils.createLamp(this._canvas, data.Name+\":lamp\", {\n          coordinates:Utils.PointRTA(style.coordinates, [0.95, 0.05])\n        });\n      }\n\n      return JSRect.create(style.coordinates.Left+1, style.coordinates.Top+title_height, style.coordinates.Width-2, style.coordinates.Height-title_height-1);\n    },\n    drawFrame2: function(data, style)\n    {\n      var title_height = style.coordinates.Height / 15;\n      debug.print(\"title_height:\" + title_height);\n      Utils.createRect(this._canvas, data.Name+\":frame\", {\n        coordinates:style.coordinates,\n        fillColor:style.style.fillColor,\n        color:style.style.borderColor,\n        weight:style.style.borderWeight,\n        radius:style.style.borderRadius\n      });\n      Utils.createRect(this._canvas, data.Name+\":frame_title\", {\n        coordinates:JSRect.create(style.coordinates.Left, style.coordinates.Top, style.coordinates.Width, title_height/10),\n        fillColor:style.style.hairPinColor,\n        color:style.style.hairPinColor\n      });\n      Utils.createText(this._canvas, data.Name+\":frame_caption\", {\n        coordinates:JSRect.create(style.coordinates.Left, style.coordinates.Top, style.coordinates.Width, title_height),\n        text:data.Label,\n        color:style.style.textColor,\n        textAlign:style.style.textAlign,\n        fontSize:style.style.fontSize\n      });\n\n      if (style.style.showAlarmLamp)\n      {\n        Utils.createLamp(this._canvas, data.Name+\":lamp\", {\n          coordinates:Utils.PointRTA(style.coordinates, [0.95, 0.05])\n        });\n      }\n\n      return JSRect.create(style.coordinates.Left+1, style.coordinates.Top+title_height, style.coordinates.Width-2, style.coordinates.Height-title_height-1);\n    },\n    drawItem: function(data, style)\n    {\n      var rect = Utils.createRect(this._canvas, data.Name+\":frame\", {\n        coordinates:style.coordinates,\n        fillColor:style.style.fillColor,\n        color:style.style.borderColor,\n        weight:style.style.borderWeight,\n        radius:style.style.borderRadius\n      });\n      Utils.createText(this._canvas, data.Name+\":frame_caption\", {\n        coordinates:Utils.RectRTA(style.coordinates, [[0,0.1], [1, 0.9]]),\n        text:data.Label,\n        color:style.style.textColor,\n        textAlign:style.style.textAlign,\n        fontSize:style.style.fontSize\n      });\n\n      if (style.style.showAlarmLamp)\n      {\n        Utils.createLamp(this._canvas, data.Name+\":lamp\", {\n          coordinates:Utils.PointRTA(style.coordinates, [0.95, 0.05])\n        });\n      }\n\n      if (data.Link) rect.mapLink = data.Link.MapId;\n    },\n    arrangeGrid: function(data, style)\n    {\n      var count = data.Children.length;\n      var margin = (style.coordinates.Height * style.style.margin)/100;\n      var gap =  (style.coordinates.Height * style.style.gap)/100;\n      var bound = JSRect.create(style.coordinates.Left + margin, style.coordinates.Top + margin, style.coordinates.Width - margin*2, style.coordinates.Height - margin*2);\n      var rows = 1;\n      var cols = count;\n\n      debug.print(\"count: \" + count +\", margin: \" + margin + \", gap: \" + gap);\n\n      var size = (bound.Width - (count-1) * gap) / count;\n      if (size > bound.Height) size = bound.Height;\n\n      var est_size = size;\n      for(var idx=1; idx <= count; idx++)\n      {\n        var est_height = (est_size * (rows+1)) + rows * gap;\n        if (est_height < bound.Height) {\n          rows++;\n          cols = parseInt(count / rows) + (((count % rows) != 0)?1:0);\n          est_size = (bound.Width - (cols-1) * gap) / cols;\n          if ( ((est_size * rows) + (rows-1) * gap) > bound.Height )\n          {\n            est_size = (bound.Height - (rows-1) * gap) / rows;\n          }\n        }\n        else {\n          size = est_size;\n          break;\n        }\n      }\n\n      var real_height = (size * rows) + (rows-1) * gap;\n      var top = (bound.Height - real_height) /2;\n      var real_width = (size * cols) + (cols-1) * gap;\n      var left = (bound.Width - real_width) / 2;\n\n      var idx = 0;\n      for (var row=0; row < rows; row++) {\n        for (var col=0; col < cols; col++) {\n          var child = data.Children[idx];\n          this.drawNode(child, {\n            coordinates:JSRect.create(bound.Left + left + (size * col) + ((col>0)?(gap*col):0), bound.Top + top + (size * row) + ((row>0)?(gap*row):0), size, size),\n            style:child.Style\n          });\n          idx++;\n        }\n      }\n    },\n    drawNode: function(data, style)\n    {\n      debug.print(\"drawNode: \" + JSON.stringify(data));\n      if (!data) return;\n\n      if (data.Children.length != 0)\n      {\n        var bound = (data.top)?this.drawFrame(data, style):this.drawFrame2(data, style);\n        this.arrangeGrid(data, {\n          coordinates:bound,\n          style:style.style\n        });\n      }\n      else {\n        this.drawItem(data, style);\n      }\n    },\n    main : function()\n    {\n        debug.print(JSON.stringify(this._data));\n\n        if (!this._data || this._data.length == 0)\n        {\n            return;\n        }\n        /*\n        var count = this._data[0].Children.length;\n        for(var idx=0; idx<10; idx++)\n        {\n          var obj = JSON.parse(JSON.stringify(this._data[0].Children[idx % 3]));\n          obj.Name = obj.Name + \"_\" + idx;\n          obj.Label = obj.Label + \"_\" + idx;\n          this._data[0].Children.push(obj);\n        }\n        */\n\n        var style = this._data[0].Style;\n        this._data[0].top = true;\n        this.drawNode(this._data[0], {\n          coordinates:this._templateElement.coordinates,\n          style:this._data[0].Style\n        });\n    }\n}\n",
            "MockupData": "{\n}\n",
            "Style": "[\n    {\n        \"name\":\"margin\",\n        \"value\":5.0,\n        \"format\":\"0.00\"\n    },\n    {\n        \"name\":\"gap\",\n        \"value\":2.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"textColor\",\n        \"value\":\"#FFFFFFFF\"\n    },\n    {\n        \"name\":\"textAlign\",\n        \"value\":\"center\"\n    },\n    {\n        \"name\":\"fontSize\",\n        \"value\":30.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"hairPinColor\",\n        \"value\":\"#ff00baff\"\n    },\n    {\n        \"name\":\"borderColor\",\n        \"value\":\"#FFFFFFFF\"\n    },\n    {\n        \"name\":\"fillColor\",\n        \"value\":\"#80000000\"\n    },\n    {\n        \"name\":\"borderWeight\",\n        \"value\":3.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"borderRadius\",\n        \"value\":5.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"showAlarmLamp\",\n        \"value\":false,\n        \"type\":\"boolean\"\n    }\n]\n",
            "parentId": null
        },
        {
            "id": "single_rectangle",
            "Name": "single_rectangle",
            "IconPath": "",
            "Script": "single_rectangle = {\n  main : function()\n  {\n      if (!this._data || this._data.length == 0)\n      {\n          return;\n      }\n\n      debug.print(JSON.stringify(this._data));\n\n      var data = this._data[0];\n      var style = this._data[0].Style;\n\n      var rect = Utils.createRect(this._canvas, data.Name+\":frame\", {\n        coordinates:this._templateElement.coordinates,\n        fillColor:style.fillColor,\n        color:style.borderColor,\n        weight:style.borderWeight,\n        radius:style.borderRadius\n      });\n      Utils.createRect(this._canvas, data.Name+\":frame_hearpin\", {\n        coordinates:JSRect.create(this._templateElement.coordinates.Left, this._templateElement.coordinates.Top, this._templateElement.coordinates.Width, this._templateElement.coordinates.Height/20),\n        fillColor:style.hairPinColor,\n        color:style.hairPinColor\n      });\n      Utils.createText(this._canvas, data.Name+\":frame_caption\", {\n        coordinates:Utils.RectRTA(this._templateElement.coordinates, [[0,0.1], [1, 0.9]]),\n        text:data.Label,\n        color:style.textColor,\n        textAlign:style.textAlign,\n        fontSize:style.fontSize\n      });\n\n      if (style.showAlarmLamp)\n      {\n        Utils.createLamp(this._canvas, data.Name+\":lamp\", {\n          coordinates:Utils.PointRTA(this._templateElement.coordinates, [0.95, 0.5])\n        });\n      }\n\n      if (data.Link) rect.mapLink = data.Link.MapId;\n  }\n}\n",
            "MockupData": "{\n}\n",
            "Style": "[\n    {\n        \"name\":\"textColor\",\n        \"value\":\"#FFFFFFFF\"\n    },\n    {\n        \"name\":\"textAlign\",\n        \"value\":\"center\"\n    },\n    {\n        \"name\":\"fontSize\",\n        \"value\":20.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"hairPinColor\",\n        \"value\":\"#ff00baff\"\n    },\n    {\n        \"name\":\"borderColor\",\n        \"value\":\"#FFFFFFFF\"\n    },\n    {\n        \"name\":\"fillColor\",\n        \"value\":\"#80000000\"\n    },\n    {\n        \"name\":\"borderWeight\",\n        \"value\":3.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"borderRadius\",\n        \"value\":5.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"showAlarmLamp\",\n        \"value\":false,\n        \"type\":\"boolean\"\n    }\n]\n",
            "parentId": null
        },
        {
            "id": "db_circle",
            "Name": "db_circle",
            "IconPath": "",
            "Script": "db_circle = {\n  main : function()\n  {\n    if (!this._data || this._data.length == 0)\n    {\n      debug.print(\"db_circle : no data!\");\n      return;\n    }\n\n    var style = this._data[0].Style;\n    var gap = style.gap;\n\n    debug.print(JSON.stringify(this._data));\n    var height3 = this._templateElement.coordinates.Height / 3;\n    var count = this._data.length;\n\n    var size = height3 * 2;\n    gap =  (size * gap)/100;\n    var length = (count * size) + (gap * (count-1));\n    var left = this._templateElement.coordinates.Left + (this._templateElement.coordinates.Width - length) / 2;\n\n    for(var idx = 0; idx < count; idx++)\n    {\n      var rect = JSRect.create(left + (idx * (size + gap)), this._templateElement.coordinates.Top + height3, size, size);\n\n      Utils.createLine(this._canvas, this._data[idx].Name + \":line\", {\n        coordinates:[JSPoint.create(rect.Left + rect.Width/2, this._templateElement.coordinates.Top), JSPoint.create(rect.Left + rect.Width/2, rect.Top)],\n        color:style.lineColor,\n        weight:style.lineWeight\n      });\n\n      Utils.createEllipse(this._canvas, this._data[idx].Name + \":circle\", {\n        coordinates:rect,\n        fillColor:style.fillColor,\n        color:style.borderColor,\n        weight:style.borderWeight\n      });\n\n      if (style.showAlarmLamp)\n      {\n        Utils.createLamp(this._canvas, this._data[idx].Name + \":lamp\", {\n          coordinates:Utils.PointRTA(rect, [0.5, 0.2])\n        });\n      }\n\n      Utils.createText(this._canvas, this._data[idx].Name + \":text\", {\n        coordinates:Utils.RectRTA(rect, [[0.2,0.2], [0.8, 0.8]]),\n        text: this._data[idx].Label,\n        color:style.textColor,\n        textAlign:style.textAlign,\n        fontSize:style.fontSize\n      });\n\n    }\n\n    Utils.createLine(this._canvas, \"App:line\", {\n      coordinates:[JSPoint.create(left + size/2, this._templateElement.coordinates.Top), JSPoint.create(left + ((count-1) * (size + gap)) + size/2, this._templateElement.coordinates.Top)],\n      color:style.lineColor,\n      weight:style.lineWeight\n    });\n\n  }\n}\n",
            "MockupData": "{\n}\n",
            "Style": "[\n    {\n        \"name\":\"gap\",\n        \"value\":20.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"textColor\",\n        \"value\":\"#FFFFFFFF\"\n    },\n    {\n        \"name\":\"textAlign\",\n        \"value\":\"center\"\n    },\n    {\n        \"name\":\"fontSize\",\n        \"value\":20.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"lineColor\",\n        \"value\":\"#FFFFFFFF\"\n    },\n    {\n        \"name\":\"lineWeight\",\n        \"value\":3.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"borderColor\",\n        \"value\":\"#FFFFFFFF\"\n    },\n    {\n        \"name\":\"fillColor\",\n        \"value\":\"#80000000\"\n    },\n    {\n        \"name\":\"borderWeight\",\n        \"value\":3.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"showAlarmLamp\",\n        \"value\":false,\n        \"type\":\"boolean\"\n    }\n]\n",
            "parentId": null
        },
        {
            "id": "infradiagram",
            "Name": "infradiagram",
            "IconPath": "",
            "Script": "infradiagram = {\n  itemIdx : 0,\n  drawInstance : function(data, style)\n  {\n    var d_style = data.Style;\n    var rect = Utils.createRect(this._canvas, data.Name+\":frame_\"+this.itemIdx, {\n      coordinates:Utils.RectRTA(style.coordinates, [[0.05,0.2], [0.95, 0.8]]),\n      fillColor:d_style.fillColor,\n      color:d_style.borderColor,\n      weight:d_style.borderWeight,\n      radius:d_style.borderRadius\n    });\n    Utils.createText(this._canvas, data.Name+\":caption_\"+this.itemIdx, {\n      coordinates:Utils.RectRTA(style.coordinates, [[0.1,0.3], [0.7, 0.7]]),\n      text:data.Label,\n      color:d_style.textColor,\n      textAlign:d_style.textAlign,\n      fontSize:d_style.fontSize\n    });\n\n    if (d_style.showAlarmLamp)\n    {\n      Utils.createLamp(this._canvas, data.Name+\":lamp_\"+this.itemIdx, {\n        coordinates:Utils.PointRTA(style.coordinates, [0.90, 0.5]),\n        objectName:data.Name\n      });\n    }\n\n    this.itemIdx++;\n  },\n  drawHost : function(data, style)\n  {\n    var d_style = data.Style;\n    var rect = Utils.createRect(this._canvas, data.Name+\":frame\", {\n      coordinates:style.coordinates,\n      fillColor:d_style.fillColor,\n      color:d_style.borderColor,\n      weight:d_style.borderWeight,\n      radius:d_style.borderRadius\n    });\n    Utils.createText(this._canvas, data.Name+\":caption\", {\n      coordinates:Utils.RectRTA(style.coordinates, [[0.05,0], [1, 0.3]]),\n      text:data.Label,\n      color:d_style.textColor,\n      textAlign:d_style.textAlign,\n      fontSize:d_style.fontSize\n    });\n\n    if (d_style.showAlarmLamp)\n    {\n      Utils.createLamp(this._canvas, data.Name+\":lamp\", {\n        coordinates:Utils.PointRTA(style.coordinates, [0.95, 0.1]),\n        objectName:data.Name\n      });\n    }\n\n    if (data.Children.length != 0)\n    {\n      this.drawInstance(data.Children[0], {\n        coordinates:Utils.RectRTA(style.coordinates, [[0,0.3], [1, 1]])\n      });\n    }\n  },\n  drawItems : function(data, style)\n  {\n    var margin = (style.coordinates.Height * style.margin)/100;\n    var gap =  (style.coordinates.Height * style.gap)/100;\n    var bound = JSRect.create(style.coordinates.Left + margin, style.coordinates.Top + margin, style.coordinates.Width - margin*2, style.coordinates.Height - margin*2);\n    var itemWidth = (bound.Width - gap * (style.cols-1))/style.cols;\n    var itemHeight = itemWidth / style.itemRatio;\n    var cols = style.cols;\n    var rows = parseInt(data.length / cols) + (( (data.length % cols) != 0)?1:0);\n\n    var col = 0;\n    var row = 0;\n    for(var idx in data)\n    {\n      this.drawHost(data[idx], {\n        coordinates:JSRect.create(bound.Left + col*(itemWidth+gap), bound.Top + row*(itemHeight+gap), itemWidth, itemHeight)\n      });\n      col++;\n      if (col == cols)\n      {\n        col = 0;\n        row++;\n      }\n    }\n\n  },\n  main : function()\n  {\n    if (!this._data || this._data.length == 0)\n    {\n        debug.print(\"using infradiagram : no data!\");\n        return;\n    }\n\n    var style = this._data[0].Style;\n    debug.print(JSON.stringify(this._data));\n\n    Utils.createRect(this._canvas, this._templateElement.name + \":frame\", {\n      coordinates:this._templateElement.coordinates,\n      fillColor:style.fillColor,\n      color:style.borderColor,\n      weight:style.borderWeight,\n      radius:style.borderRadius\n    });\n\n    Utils.createText(this._canvas, this._templateElement.name + \":text\", {\n      coordinates:Utils.RectRTA(this._templateElement.coordinates, [[0.05,0], [1, 0.05]]),\n      text:this._templateElement.name,\n      color:style.textColor,\n      textAlign:style.textAlign,\n      fontSize:style.fontSize\n    });\n\n    this.drawItems(this._data[0].Children, {\n      coordinates:Utils.RectRTA(this._templateElement.coordinates, [[0,0.05], [1, 1]]),\n      margin:style.margin,\n      gap:style.gap,\n      cols:style.minCols,\n      itemRatio:style.itemRatio\n    });\n\n  }\n}\n",
            "MockupData": "{\n}\n",
            "Style": "[\n    {\n        \"name\":\"margin\",\n        \"value\":5.0,\n        \"format\":\"0.00\"\n    },\n    {\n        \"name\":\"gap\",\n        \"value\":2.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"minCols\",\n        \"value\":3.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"itemRatio\",\n        \"value\":2.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"textColor\",\n        \"value\":\"#FFFFFFFF\"\n    },\n    {\n        \"name\":\"textAlign\",\n        \"value\":\"center\"\n    },\n    {\n        \"name\":\"fontSize\",\n        \"value\":30.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"hairPinColor\",\n        \"value\":\"#ff00baff\"\n    },\n    {\n        \"name\":\"borderColor\",\n        \"value\":\"#FFFFFFFF\"\n    },\n    {\n        \"name\":\"fillColor\",\n        \"value\":\"#80000000\"\n    },\n    {\n        \"name\":\"borderWeight\",\n        \"value\":3.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"borderRadius\",\n        \"value\":5.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"showAlarmLamp\",\n        \"value\":false,\n        \"type\":\"boolean\"\n    }\n]\n",
            "parentId": null
        },
        {
            "id": "db_infradiagram",
            "Name": "db_infradiagram",
            "IconPath": "",
            "Script": "db_infradiagram = {\n  itemIdx : 0,\n  drawInstance : function(data, style)\n  {\n    var d_style = data.Style;\n    var rect = Utils.createRect(this._canvas, data.Name+\":frame_\"+this.itemIdx, {\n      coordinates:Utils.RectRTA(style.coordinates, [[0.05,0.2], [0.95, 0.8]]),\n      fillColor:d_style.fillColor,\n      color:d_style.borderColor,\n      weight:d_style.borderWeight,\n      radius:d_style.borderRadius\n    });\n    Utils.createText(this._canvas, data.Name+\":caption_\"+this.itemIdx, {\n      coordinates:Utils.RectRTA(style.coordinates, [[0.1,0.3], [0.7, 0.7]]),\n      text:data.Label,\n      color:d_style.textColor,\n      textAlign:d_style.textAlign,\n      fontSize:d_style.fontSize\n    });\n\n    if (d_style.showAlarmLamp)\n    {\n      Utils.createLamp(this._canvas, data.Name+\":lamp_\"+this.itemIdx, {\n        coordinates:Utils.PointRTA(style.coordinates, [0.90, 0.5]),\n        objectName:data.Name\n      });\n    }\n\n    this.itemIdx++;\n  },\n  drawHost : function(data, style)\n  {\n    var d_style = data.Style;\n\n    var rect = Utils.createRect(this._canvas, data.Name+\":frame\", {\n      coordinates:style.coordinates,\n      fillColor:d_style.fillColor,\n      color:d_style.borderColor,\n      weight:d_style.borderWeight,\n      radius:d_style.borderRadius\n    });\n    Utils.createText(this._canvas, data.Name+\":caption\", {\n      coordinates:Utils.RectRTA(style.coordinates, [[0.05,0], [1, 0.3]]),\n      text:data.Label,\n      color:d_style.textColor,\n      textAlign:d_style.textAlign,\n      fontSize:d_style.fontSize\n    });\n\n    if (d_style.showAlarmLamp)\n    {\n      Utils.createLamp(this._canvas, data.Name+\":lamp\", {\n        coordinates:Utils.PointRTA(style.coordinates, [0.95, 0.1]),\n        objectName:data.Name\n      });\n    }\n\n    if (data.Children.length != 0)\n    {\n      this.drawInstance(data.Children[0], {\n        coordinates:Utils.RectRTA(style.coordinates, [[0,0.3], [1, 1]])\n      });\n    }\n  },\n  drawItems : function(data, style)\n  {\n    var d_style = data.Style;\n    var child = data.Children;\n    var margin = (style.coordinates.Height * style.margin)/100;\n    var gap =  (style.coordinates.Height * style.gap)/100;\n    var bound = JSRect.create(style.coordinates.Left + margin, style.coordinates.Top + margin, style.coordinates.Width - margin*2, style.coordinates.Height - margin*2);\n    var cols = style.cols;\n    var rows = parseInt(child.length / cols) + (( (child.length % cols) != 0)?1:0);\n\n    Utils.createRect(this._canvas, data.Name + \":frame\", {\n      coordinates:bound,\n      fillColor:d_style.fillColor,\n      color:d_style.borderColor,\n      weight:d_style.borderWeight,\n      radius:d_style.borderRadius\n    });\n\n    var titleHeight = 0.07 * bound.Height;\n    Utils.createText(this._canvas, data.Name + \":text\", {\n      coordinates:Utils.RectRTA(bound, [[0.05,0.01], [1, 0.07]]),\n      text:data.Label,\n      color:d_style.textColor,\n      textAlign:d_style.textAlign,\n      fontSize:d_style.fontSize\n    });\n\n    var padding = (style.coordinates.Height * style.padding)/100;\n    var itemBound = JSRect.create(bound.Left + padding, bound.Top + padding + titleHeight, bound.Width - padding*2, bound.Height - padding*2 - titleHeight);\n    var itemWidth = (itemBound.Width - gap * (style.cols-1))/style.cols;\n    var itemHeight = itemWidth / style.itemRatio;\n\n    var col = 0;\n    var row = 0;\n    for(var idx in child)\n    {\n      this.drawHost(child[idx], {\n        coordinates:JSRect.create(itemBound.Left + col*(itemWidth+gap), itemBound.Top + row*(itemHeight+gap), itemWidth, itemHeight)\n      });\n      col++;\n      if (col == cols)\n      {\n        col = 0;\n        row++;\n      }\n    }\n\n  },\n  arrangeGrid: function(data, style)\n  {\n    var count = data.length;\n    var margin = (style.coordinates.Height * style.margin)/100;\n    var gap =  (style.coordinates.Height * style.gap)/100;\n    var padding =  (style.coordinates.Height * style.padding)/100;\n    var bound = JSRect.create(style.coordinates.Left + margin, style.coordinates.Top + margin, style.coordinates.Width - margin*2, style.coordinates.Height - margin*2);\n    var rows = 1;\n    var cols = count;\n\n    debug.print(\"count: \" + count +\", margin: \" + margin + \", gap: \" + gap);\n\n    var size = (bound.Width - (count-1) * gap) / count;\n    if (size > bound.Height) size = bound.Height;\n\n    var est_size = size;\n    for(var idx=1; idx <= count; idx++)\n    {\n      var est_height = (est_size * (rows+1)) + rows * gap;\n      if (est_height < bound.Height) {\n        rows++;\n        cols = parseInt(count / rows) + (((count % rows) != 0)?1:0);\n        est_size = (bound.Width - (cols-1) * gap) / cols;\n        if ( ((est_size * rows) + (rows-1) * gap) > bound.Height )\n        {\n          est_size = (bound.Height - (rows-1) * gap) / rows;\n        }\n      }\n      else {\n        size = est_size;\n        break;\n      }\n    }\n\n    var real_height = (size * rows) + (rows-1) * gap;\n    var top = (bound.Height - real_height) /2;\n    var real_width;\n    var left;\n    var size_width = size;\n    var size_height = size;\n\n    if (cols == 1 && size < bound.Width)\n    {\n      size_width = bound.Width;\n      left = 0;\n    }\n    else {\n      real_width = (size * cols) + (cols-1) * gap;\n      left = (bound.Width - real_width) / 2;\n    }\n\n    var idx = 0;\n    for (var row=0; row < rows; row++) {\n      for (var col=0; col < cols; col++) {\n        var child = data[idx];\n        debug.print(JSON.stringify(child));\n\n        this.drawItems(child, {\n          coordinates:JSRect.create(bound.Left + left + (size_width * col) + ((col>0)?(gap*col):0), bound.Top + top + (size_height * row) + ((row>0)?(gap*row):0), size_width, size_height),\n          margin:0,\n          padding:5,\n          gap:2,\n          cols:style.cols,\n          itemRatio:style.itemRatio\n        });\n        idx++;\n      }\n    }\n  },\n  main : function()\n  {\n    if (!this._data || this._data.length == 0)\n    {\n      debug.print(\"using db_infradiagram : no data!\");\n        return;\n    }\n\n    debug.print(JSON.stringify(this._data));\n    var style = this._data[0].Style;\n\n    Utils.createRect(this._canvas, this._templateElement.name + \":frame\", {\n      coordinates:this._templateElement.coordinates,\n      fillColor:style.fillColor,\n      color:style.borderColor,\n      weight:style.borderWeight,\n      radius:style.borderRadius\n    });\n\n    Utils.createText(this._canvas, this._templateElement.name + \":text\", {\n      coordinates:Utils.RectRTA(this._templateElement.coordinates, [[0.05,0], [1, 0.05]]),\n      text:this._templateElement.name,\n      color:style.textColor,\n      textAlign:style.textAlign,\n      fontSize:style.fontSize\n    });\n\n    this.arrangeGrid(this._data[0].Children, {\n      coordinates:Utils.RectRTA(this._templateElement.coordinates, [[0,0.05], [1, 1]]),\n      margin:style.margin,\n      padding:style.padding,\n      gap:style.gap,\n      cols:style.minCols,\n      itemRatio:style.itemRatio\n    });\n\n  }\n}\n",
            "MockupData": "{\n}\n",
            "Style": "[\n    {\n        \"name\":\"margin\",\n        \"value\":5.0,\n        \"format\":\"0.00\"\n    },\n    {\n        \"name\":\"padding\",\n        \"value\":0.0,\n        \"format\":\"0.00\"\n    },\n    {\n        \"name\":\"gap\",\n        \"value\":2.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"minCols\",\n        \"value\":3.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"itemRatio\",\n        \"value\":2.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"textColor\",\n        \"value\":\"#FFFFFFFF\"\n    },\n    {\n        \"name\":\"textAlign\",\n        \"value\":\"center\"\n    },\n    {\n        \"name\":\"fontSize\",\n        \"value\":30.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"hairPinColor\",\n        \"value\":\"#ff00baff\"\n    },\n    {\n        \"name\":\"borderColor\",\n        \"value\":\"#FFFFFFFF\"\n    },\n    {\n        \"name\":\"fillColor\",\n        \"value\":\"#80000000\"\n    },\n    {\n        \"name\":\"borderWeight\",\n        \"value\":3.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"borderRadius\",\n        \"value\":5.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"showAlarmLamp\",\n        \"value\":false,\n        \"type\":\"boolean\"\n    }\n]\n",
            "parentId": null
        },
        {
            "id": "db_box",
            "Name": "db_box",
            "IconPath": "",
            "Script": "db_box = {\n    main : function()\n    {\n        if (!this._data || this._data.length == 0)\n        {\n            debug.print(\"db_box : no data!\");\n            return;\n        }\n        debug.print(JSON.stringify(this._data));\n        var rect = this._templateElement.coordinates;\n        var style = this._data[0].Style;\n        var gap = style.gap;\n        var padding = (rect.Height * style.padding) / 100;\n        var count = this._data.length;\n        var size = rect.Height - padding * 2;\n        gap =  (size * gap)/100;\n        var length = (count * size) + (gap * (count-1));\n        var left = this._templateElement.coordinates.Left + (this._templateElement.coordinates.Width - length) / 2;\n        Utils.createRect(this._canvas, this._templateElement.name + \":frame\", {\n            coordinates:JSRect.create(left - padding, rect.Top, length + padding * 2, rect.Height),\n            fillColor:style.fillColor,\n            color:style.borderColor,\n            weight:style.borderWeight,\n            radius:style.borderRadius\n        });\n        for(var idx = 0; idx < count; idx++)\n        {\n            var rect = JSRect.create(left + (idx * (size + gap)), rect.Top + padding, size, size);\n            Utils.createImage(this._canvas, this._data[idx].Name + \":image\", {\n                coordinates:rect,\n                url: style.imageUrl,\n                fit: true\n            });\n            if (style.showAlarmLamp)\n            {\n                Utils.createLamp(this._canvas, this._data[idx].Name + \":lamp\", {\n                    coordinates:Utils.PointRTA(rect, [0.85, 0.35]),\n                    objectName:this._data[idx].Name\n                });\n            }\n            Utils.createText(this._canvas, this._data[idx].Name + \":text\", {\n                coordinates:Utils.RectRTA(rect, [[0.1,0.3], [0.9, 0.9]]),\n                text: this._data[idx].Label,\n                color:style.textColor,\n                textAlign:style.textAlign,\n                fontSize:style.fontSize\n            });\n        }\n    }\n}\n",
            "MockupData": "{\n}\n",
            "Style": "[\n    {\n        \"name\":\"gap\",\n        \"value\":20.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"padding\",\n        \"value\":5.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"textColor\",\n        \"value\":\"#FFFFFFFF\"\n    },\n    {\n        \"name\":\"textAlign\",\n        \"value\":\"center\"\n    },\n    {\n        \"name\":\"fontSize\",\n        \"value\":20.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"borderColor\",\n        \"value\":\"#FFFFFFFF\"\n    },\n    {\n        \"name\":\"fillColor\",\n        \"value\":\"#80000000\"\n    },\n    {\n        \"name\":\"borderWeight\",\n        \"value\":3.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"borderRadius\",\n        \"value\":5.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"imageUrl\",\n        \"value\":\"/proxy/file/resource/flash.png\"\n    },\n    {\n        \"name\":\"showAlarmLamp\",\n        \"value\":false,\n        \"type\":\"boolean\"\n    }\n]\n",
            "parentId": null
        },
        {
            "id": "text_box",
            "Name": "text_box",
            "IconPath": "",
            "Script": "text_box = {\n    main : function()\n    {\n        if (!this._data || this._data.length == 0)\n        {\n            return;\n        }\n        debug.print(JSON.stringify(this._data));\n        var data = this._data[0];\n        var style = this._data[0].Style;\n        var text = Utils.createText(this._canvas, this._templateElement.name + \":text\", {\n            coordinates:this._templateElement.coordinates,\n            text:data.Label,\n            color:style.textColor,\n            textAlign:style.textAlign,\n            fontSize:style.fontSize,\n            objectName:data.Name\n        });\n        text.propBinding[\"text\"]=style.metricName;\n    }\n}\n",
            "MockupData": "{\n}\n",
            "Style": "[\n    {\n        \"name\":\"textColor\",\n        \"value\":\"#FFFFFFFF\"\n    },\n    {\n        \"name\":\"textAlign\",\n        \"value\":\"center\"\n    },\n    {\n        \"name\":\"fontSize\",\n        \"value\":20.0,\n        \"format\":\"0.0\"\n    },\n    {\n        \"name\":\"metricName\",\n        \"value\":\"\"\n    }\n]\n",
            "parentId": null
        },
        {
            "id": "iframe_box",
            "Name": "iframe_box",
            "IconPath": "",
            "Script": "iframe_box = {\n    main : function()\n    {\n        if (!this._data || this._data.length == 0)\n        {\n            return;\n        }\n        debug.print(JSON.stringify(this._data));\n        var data = this._data[0];\n        var style = this._data[0].Style;\n        if (style.url.indexOf('?') != -1) {\n            style.url += \"&objectName=\" + data.Name;\n        }\n        else {\n            style.url += \"?objectName=\" + data.Name;\n        }\n        Utils.createIFrame(this._canvas, this._templateElement.name + \":iframe\", {\n            coordinates:this._templateElement.coordinates,\n            content:\"<div  style='width:100%;height:100%;overflow:hidden;'><iframe id='line_chart' style='border:none;width:100%;height:100%;overflow:hidden;' src='\" + style.url + \"'></iframe></div>\"\n        });\n    }\n}\n",
            "MockupData": "{\n}\n",
            "Style": "[\n    {\n        \"name\":\"url\",\n        \"value\":\"www.wikipedia.org/\"\n    }\n]\n",
            "parentId": null
        },
        {
            "id": "url_link",
            "Name": "url_link",
            "IconPath": null,
            "Script": "url_link = {\n    main : function()\n    {\n        if (!this._data || this._data.length == 0)\n        {\n            return;\n        }\n        debug.print(JSON.stringify(this._data));\n        var data = this._data[0];\n        var style = this._data[0].Style;\n        var rect = Utils.createRect(this._canvas, this._templateElement.name + \":frame\", {\n            coordinates:this._templateElement.coordinates,\n            fillColor:\"#00000000\",\n            color:\"#00000000\",\n            weight:0,\n            radius:0\n        });\n        rect.actions.add(\"click\", \"newTab\", \"url\", style.LinkUrl);\n    }\n}\n",
            "MockupData": "{\n}\n",
            "Style": "[\n    {\n        \"name\": \"LinkUrl\",\n        \"value\": \"\"\n    }\n]\n",
            "parentId": null
        },
        {
            "id": "ChangeMap",
            "Name": "ChangeMap",
            "IconPath": null,
            "Script": "ChangeMap = {\n    main : function()\n    {\n        if (!this._data || this._data.length == 0)\n        {\n            return;\n        }\n        debug.print(JSON.stringify(this._data));\n        var data = this._data[0];\n        var style = this._data[0].Style;\n        var rect = Utils.createRect(this._canvas, this._templateElement.name + \":frame\", {\n            coordinates:this._templateElement.coordinates,\n            fillColor:\"#00000000\",\n            color:\"#00000000\",\n            weight:0,\n            radius:0\n        });\n        rect.actions.add(\"click\", \"mapChange\", \"mapLinkGuid\", style.MapGuid+'?'+style.Params);\n    }\n}\n",
            "MockupData": "{\n}\n",
            "Style": "[\n    {\n        \"name\": \"MapGuid\",\n        \"value\": \"\"\n    },\n    {\n        \"name\": \"Params\",\n        \"value\": \"\"\n    }\n]\n",
            "parentId": null
        }    
    ]
}